# https://www.serverless.com/framework/docs/providers/aws/events/sqs
useDotenv: true # Load the .env[.{stage}] environment variables for local usage.

service: apigw-http-api-sqs-lambda-sls
frameworkVersion: '^3' # require serverless v3 or later

plugins:
  - serverless-plugin-typescript # enable TypeScript support for Lambda functions
  - serverless-offline

provider:
  name: aws

  # common configuration for all Lambda functions in this stack
  runtime: nodejs18.x
  architecture: arm64 # use Graviton for running all Lambda functions

  # use --region option value or the default - us-east-1
  region: ${env:REGION, "eu-north-1"}

  # override the default stage (dev), although we are not using it in the script below
  stage: ${opt:stage, "dev"}

  # optional, Lambda function's memory size in MB, default is 1024
  memorySize: ${env:LAMBDA_MEMORY_SIZE, 256}

  # user profile
  profile: default  	

# Lambda function triggered with events from the default EventBridge topic
functions:
  logEvent:
    handler: src/handler.logEvent
    memorySize: ${env:LAMBDA_MEMORY_SIZE, 256} # optional, in MB, default is 1024
    events:
      - sqs:
          arn: !GetAtt MySqsQueue.Arn
          batchSize: ${env:BATCH_SIZE, 10} # The default batchSize is 10. The max batchSize is 10000 for a standard queue, 10 for a FIFO queue.
          maximumBatchingWindow: ${env:MAXIMUN_BATCHING_WINDOW, 60} # The max maximumBatchingWindow is 300 seconds.
          functionResponseType: ReportBatchItemFailures  # let your function return a partial success result if one or more messages in the batch have failed.
          maximumConcurrency: ${env:MAXIMUM_CONCURRENCY, 10} # The minimum limit of concurrent functions that the event source can invoke is 2, and the maximum is 1000.

resources:
  # Override the default description
  Description: API Gateway HTTP API to SQS, triggering a Lambda function (Serverless Framework).

  Resources:
    # Define SQS queue
    MySqsQueue:
      Type: AWS::SQS::Queue

    # Create an API Gateway HTTP API
    MyHttpApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Body: ${file(./api.json)}

    # Create the default stage and configure it to automatically deploy
    MyHttpApiStage:
      Type: AWS::ApiGatewayV2::Stage    
      Properties:
        ApiId: !Ref MyHttpApi
        # we use default stage, instead of the stage name for simplicity.
        # Use ${sls:stage} to get the stage name.
        StageName: '$default'
        AutoDeploy: true

    # Create the role for API Gateway access to SQS
    MyHttpApiRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ApiDirectWriteEventBridge
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                Action:
                - sqs:SendMessage
                Effect: Allow
                Resource:
                  - !GetAtt MySqsQueue.Arn

  Outputs:
    ApiEndpoint:
      Description: "HTTP API endpoint URL"
      Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
